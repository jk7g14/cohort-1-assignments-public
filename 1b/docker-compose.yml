version: '3.8'

services:
  caddy:
    image: caddy:2.7-alpine
    container_name: caddy
    ports:
      - '80:80'
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
    depends_on:
      - geth
      - sc-deployment-server
    restart: unless-stopped

  ngrok:
    image: ngrok/ngrok:latest
    container_name: ngrok
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    command:
      - 'http'
      - '--domain=${NGROK_DOMAIN}'
      - 'caddy:80'
    depends_on:
      - caddy
    restart: unless-stopped

  sc-deployment-server:
    image: caddy:2.7-alpine
    container_name: sc-deployment-server
    volumes:
      - ./sc-deployment-server/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./deployment_output:/usr/share/caddy:ro
    restart: unless-stopped
  geth:
    image: ethereum/client-go:v1.15.0
    container_name: geth
    entrypoint: ['/entrypoint.sh']
    volumes:
      - ./geth/entrypoint.sh:/entrypoint.sh:ro
      - ./geth_data:/root/.ethereum
    ports:
      - '8545:8545'
      - '8546:8546'

  geth-init:
    image: ethereum/client-go:v1.15.0
    container_name: geth-init
    entrypoint: ['/entrypoint.sh']
    volumes:
      - ./geth-init/entrypoint.sh:/entrypoint.sh:ro
      - ./geth-init/prefund.js:/scripts/prefund.js:ro
      - shared_data:/shared
    environment:
      - DEPLOYER_ADDRESS=${DEPLOYER_ADDRESS}
    depends_on:
      - geth
    network_mode: 'service:geth'

  sc-deployer:
    image: ghcr.io/foundry-rs/foundry:latest
    container_name: sc-deployer
    entrypoint: ['/entrypoint.sh']
    volumes:
      - ./sc-deployer/entrypoint.sh:/entrypoint.sh:ro
      - shared_data:/shared
      - ./deployment_output:/deployment_output
    environment:
      - ASSIGNMENT_1A_REPO=${ASSIGNMENT_1A_REPO}
      - ASSIGNMENT_1A_SUBDIR=${ASSIGNMENT_1A_SUBDIR}
      - FOUNDRY_SCRIPT=${FOUNDRY_SCRIPT}
      - ETH_RPC_URL=${ETH_RPC_URL}
      - DEPLOYER_PRIVATE_KEY=${DEPLOYER_PRIVATE_KEY}
      - DEPLOYER_ADDRESS=${DEPLOYER_ADDRESS}
    depends_on:
      - geth-init
    network_mode: 'service:geth'
  graph-ipfs:
    image: ipfs/kubo:v0.22.0
    container_name: graph-ipfs
    ports:
      - '5001:5001'
    volumes:
      - graph_ipfs_data:/data/ipfs

  graph-postgres:
    image: postgres:13
    container_name: graph-postgres
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
      POSTGRES_INITDB_ARGS: --locale=C --encoding=UTF8
    command: ['postgres', '-cshared_preload_libraries=pg_stat_statements']
    volumes:
      - graph_postgres_data:/var/lib/postgresql/data

  graph-redis:
    image: redis:6
    container_name: graph-redis
    volumes:
      - graph_redis_data:/data

  graph-node:
    image: graphprotocol/graph-node:latest
    platform: linux/amd64
    container_name: graph-node
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8020:8020'
      - '8030:8030'
      - '8040:8040'
    depends_on:
      - graph-ipfs
      - graph-postgres
      - graph-redis
      - geth
    environment:
      postgres_host: graph-postgres
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'graph-ipfs:5001'
      ethereum: 'mainnet:http://geth:8545'
      GRAPH_LOG: info
      RUST_LOG: info
      GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: 'true'

  simple-explorer:
    image: nginx:alpine
    container_name: simple-explorer
    volumes:
      - ./simple-explorer:/usr/share/nginx/html:ro
    ports:
      - '4003:80'
    restart: unless-stopped

volumes:
  shared_data:
  graph_ipfs_data:
  graph_postgres_data:
  graph_redis_data:
